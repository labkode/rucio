diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
index 7422da791..3cc0b2194 100644
--- a/lib/rucio/transfertool/fts3.py
+++ b/lib/rucio/transfertool/fts3.py
@@ -317,6 +317,8 @@ def build_job_params(
         max_time_in_queue: Optional[dict] = None, logger: Callable = logging.log) -> dict[str, Any]:
     """
     Prepare the job parameters which will be passed to FTS transfertool
+    Please refer to https://fts3-docs.web.cern.ch/fts3-docs/fts-rest/docs/bulk.html#parameters
+    for the list of parameters.
     """
 
     # The last hop is the main request (the one which triggered the whole transfer),
@@ -324,13 +326,28 @@ def build_job_params(
     last_hop = transfer_path[-1]
     first_hop = transfer_path[0]
 
-    overwrite, bring_online_local = True, None
+    # Overwriting by default is set to True for non TAPE RSEs.
+    # Tape RSEs can force overwrite by setting the "overwrite" attribute to True.
+    overwrite, overwrite_when_only_on_disk, bring_online_local = True, False, None
     if first_hop.src.rse.is_tape_or_staging_required():
         # Activate bring_online if it was requested by first hop
         # We don't allow multihop via a tape, so bring_online should not be set on any other hop
         bring_online_local = bring_online
     if last_hop.dst.rse.is_tape():
-        overwrite = False
+        # FTS v3.12.12 introduced a new boolean parameter "overwrite_when_only_on_disk" that controls if the file can be overwritten
+        # in TAPE enabled RSEs ONLY IF the file is on the disk buffer and not yet commited to tape media.
+        # This functionality should reduce the number of stuck files in the disk buffer that are not migrated to tape media (for whatever reason).
+        # Please be aware that FTS does not guarantee an atomic operation from the time it checks for existence of the file on disk and tape and 
+        # the moment the file is overwritten, so there is a race condition that could overwrite the file on the tape media
+        overwrite = last_hop.dst.rse.attributes.get('overwrite', False) # honour RSE configuration to force overwrite
+        overwrite_when_only_on_disk = last_hop.dst.rse.attributes.get('overwrite_when_only_on_disk', False)
+        # setting both flags is incompatible, so we opt in for the safest approach: "overwrite_when_only_on_disk"
+        # this is aligned with FTS implementation: see 
+        if overwrite and overwrite_when_only_on_disk:
+            overwrite = False
+
+    logger(logging.ERROR, 'Is it tape?: %s %s overwrite_when_only_on_disk:%s' % (last_hop.dst.rse.name, last_hop.dst.rse.is_tape(), overwrite_when_only_on_disk))
+    logger(logging.ERROR, 'RSE attributes are: %s' % (last_hop.dst.rse.attributes))
 
     # Get dest space token
     dest_protocol = last_hop.protocol_factory.protocol(last_hop.dst.rse, last_hop.dst.scheme, last_hop.operation_dest)
@@ -350,9 +367,11 @@ def build_job_params(
                       'issuer': 'rucio',
                       'multi_sources': False,
                   },
-                  'overwrite': last_hop.rws.attributes.get('overwrite', overwrite),
+                  'overwrite': overwrite,
+                  'overwrite_when_only_on_disk': overwrite_when_only_on_disk,
                   'priority': last_hop.rws.priority}
 
+    logger(logging.ERROR, 'Job parameters are: %s' % (job_params))
     if len(transfer_path) > 1:
         job_params['multihop'] = True
         job_params['job_metadata']['multihop'] = True
@@ -395,6 +414,13 @@ def build_job_params(
         elif 'default' in max_time_in_queue:
             job_params['max_time_in_queue'] = max_time_in_queue['default']
 
+    # Refer to https://its.cern.ch/jira/browse/FTS-1749 for full details (login needed), extract below:
+    # Why the overwrite_hop parameter is needed?
+    # Rucio decides that a multihop transfer is needed DISK1 --> DISK2 --> TAPE1 in order to put the file on tape. For some reason, the file already exist at DISK2.
+    # Rucio doesn't know about this file on DISK2. It could be either a correct or corrupted file. This can be due to a previous issue on Rucio side, FTS side, network side, etc (many possible reasons).
+    # Normally, Rucio allows overwrite towards any disk destination, but denies overwrite towards a tape destination. However, in this case, because the destination of the multihop is a tape, DISK2 cannot be overwritten.
+    # Proposed solution
+    # Provide an --overwrite-hop submission option, which instructs FTS to overwrite all transfers except for the destination within a multihop submission.
     overwrite_hop = True
     for transfer_hop in transfer_path[:-1]:
         # Only allow overwrite if all hops in multihop allow it
@@ -405,6 +431,7 @@ def build_job_params(
     if not job_params['overwrite'] and overwrite_hop:
         job_params['overwrite_hop'] = overwrite_hop
 
+    logger(logging.ERROR, 'Job parameters are (before returning): %s' % (job_params))
     return job_params
 
 
@@ -443,6 +470,7 @@ def bulk_group_transfers(
             max_time_in_queue=max_time_in_queue,
             logger=logger
         )
+        logger(logging.ERROR, 'bulk_group_transfers: Job parameters are: %s' % (job_params))
         if job_params['job_metadata'].get('multi_sources') or job_params['job_metadata'].get('multihop'):
             # for multi-hop and multi-source transfers, no bulk submission.
             fts_jobs.append({'transfers': transfer_path[0:group_bulk], 'job_params': job_params})
@@ -488,6 +516,7 @@ def bulk_group_transfers(
     # split transfer groups to have at most group_bulk elements in each one
     for group in grouped_transfers.values():
         job_params = group['job_params']
+        logger(logging.ERROR, 'bulk_group_transfers: grouped_transfers.values(): Job parameters are: %s' % (job_params))
         for transfer_paths in chunks(group['transfers'], group_bulk):
             fts_jobs.append({'transfers': transfer_paths, 'job_params': job_params})
 
diff --git a/logging.patch b/logging.patch
new file mode 100644
index 000000000..85f9fbdd8
--- /dev/null
+++ b/logging.patch
@@ -0,0 +1,52 @@
+diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
+index d53e1b5bc..1a25716cc 100644
+--- a/lib/rucio/transfertool/fts3.py
++++ b/lib/rucio/transfertool/fts3.py
+@@ -346,6 +346,9 @@ def build_job_params(
+         if overwrite and overwrite_when_only_on_disk:
+             overwrite = False
+ 
++    logger(logging.ERROR, 'Is it tape?: %s %s overwrite_when_only_on_disk:%s' % (last_hop.dst.rse.name, last_hop.dst.rse.is_tape(), overwrite_when_only_on_disk))
++    logger(logging.ERROR, 'RSE attributes are: %s' % (last_hop.dst.rse.attributes))
++
+     # Get dest space token
+     dest_protocol = last_hop.protocol_factory.protocol(last_hop.dst.rse, last_hop.dst.scheme, last_hop.operation_dest)
+     dest_spacetoken = None
+diff --git a/logging.patch b/logging.patch
+index 126a27bcd..e69de29bb 100644
+--- a/logging.patch
++++ b/logging.patch
+@@ -1,33 +0,0 @@
+-commit 38d0ad56622c86fc9d4658833d985bb8067b036b
+-Author: Hugo Gonzalez Labrador <github@hugo.labkode.com>
+-Date:   Wed Jun 26 14:09:33 2024 +0200
+-
+-    add more debug info
+-
+-diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
+-index d53e1b5bc..200c33d86 100644
+---- a/lib/rucio/transfertool/fts3.py
+-+++ b/lib/rucio/transfertool/fts3.py
+-@@ -337,15 +337,18 @@ def build_job_params(
+-         # FTS v3.12.12 introduced a new boolean parameter "overwrite_when_only_on_disk" that controls if the file can be overwritten
+-         # in TAPE enabled RSEs ONLY IF the file is on the disk buffer and not yet commited to tape media.
+-         # This functionality should reduce the number of stuck files in the disk buffer that are not migrated to tape media (for whatever reason).
+--        # Please be aware that FTS does not guarantee an atomic operation from the time it checks for existence of the file on disk and tape and 
+-+        # Please be aware that FTS does not guarantee an atomic operation from the time it checks for existence of the file on disk and tape and
+-         # the moment the file is overwritten, so there is a race condition that could overwrite the file on the tape media
+--        overwrite = last_hop.rws.attributes.get('overwrite', False) # honour RSE configuration to force overwrite
+-+        overwrite = last_hop.rws.attributes.get('overwrite', False)  # honour RSE configuration to force overwrite
+-         overwrite_when_only_on_disk = last_hop.rws.attributes.get('overwrite_when_only_on_disk', False)
+--        # setting both flags is incompatible, so we opt in for the safest approach: "overwrite_when_only_on_disk"
+--        # this is aligned with FTS implementation: see 
+-+        # setting both flags is incompatible, so we opt in for the safest approach: "overwrite_when_only_on_disk
+-+        # this is aligned with FTS implementation: see
+-         if overwrite and overwrite_when_only_on_disk:
+-             overwrite = False
+- 
+-+    logger(logging.ERROR, 'Is it tape?: %s %s overwrite_when_only_on_disk:%s' % (last_hop.dst.rse.name, last_hop.dst.rse.is_tape(), overwrite_when_only_on_disk))
+-+    logger(logging.ERROR, 'RSE attributes are: %s' % (last_hop.dst.rse.attributes))
+-+
+-     # Get dest space token
+-     dest_protocol = last_hop.protocol_factory.protocol(last_hop.dst.rse, last_hop.dst.scheme, last_hop.operation_dest)
+-     dest_spacetoken = None
diff --git a/logging2.patch b/logging2.patch
new file mode 100644
index 000000000..56e39d7f8
--- /dev/null
+++ b/logging2.patch
@@ -0,0 +1,36 @@
+diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
+index 1a25716cc..33dad3892 100644
+--- a/lib/rucio/transfertool/fts3.py
++++ b/lib/rucio/transfertool/fts3.py
+@@ -371,6 +371,7 @@ def build_job_params(
+                   'overwrite_when_only_on_disk': overwrite_when_only_on_disk,
+                   'priority': last_hop.rws.priority}
+ 
++    logger(logging.ERROR, 'Job parameters are: %s' % (job_params))
+     if len(transfer_path) > 1:
+         job_params['multihop'] = True
+         job_params['job_metadata']['multihop'] = True
+@@ -430,6 +431,7 @@ def build_job_params(
+     if not job_params['overwrite'] and overwrite_hop:
+         job_params['overwrite_hop'] = overwrite_hop
+ 
++    logger(logging.ERROR, 'Job parameters are (before returning): %s' % (job_params))
+     return job_params
+ 
+ 
+@@ -468,6 +470,7 @@ def bulk_group_transfers(
+             max_time_in_queue=max_time_in_queue,
+             logger=logger
+         )
++        logger(logging.ERROR, 'bulk_group_transfers: Job parameters are: %s' % (job_params))
+         if job_params['job_metadata'].get('multi_sources') or job_params['job_metadata'].get('multihop'):
+             # for multi-hop and multi-source transfers, no bulk submission.
+             fts_jobs.append({'transfers': transfer_path[0:group_bulk], 'job_params': job_params})
+@@ -513,6 +516,7 @@ def bulk_group_transfers(
+     # split transfer groups to have at most group_bulk elements in each one
+     for group in grouped_transfers.values():
+         job_params = group['job_params']
++        logger(logging.ERROR, 'bulk_group_transfers: grouped_transfers.values(): Job parameters are: %s' % (job_params))
+         for transfer_paths in chunks(group['transfers'], group_bulk):
+             fts_jobs.append({'transfers': transfer_paths, 'job_params': job_params})
+ 
diff --git a/logging3.patch b/logging3.patch
new file mode 100644
index 000000000..deb92c2dc
--- /dev/null
+++ b/logging3.patch
@@ -0,0 +1,15 @@
+diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
+index 33dad3892..3cc0b2194 100644
+--- a/lib/rucio/transfertool/fts3.py
++++ b/lib/rucio/transfertool/fts3.py
+@@ -339,8 +339,8 @@ def build_job_params(
+         # This functionality should reduce the number of stuck files in the disk buffer that are not migrated to tape media (for whatever reason).
+         # Please be aware that FTS does not guarantee an atomic operation from the time it checks for existence of the file on disk and tape and 
+         # the moment the file is overwritten, so there is a race condition that could overwrite the file on the tape media
+-        overwrite = last_hop.rws.attributes.get('overwrite', False) # honour RSE configuration to force overwrite
+-        overwrite_when_only_on_disk = last_hop.rws.attributes.get('overwrite_when_only_on_disk', False)
++        overwrite = last_hop.dst.rse.attributes.get('overwrite', False) # honour RSE configuration to force overwrite
++        overwrite_when_only_on_disk = last_hop.dst.rse.attributes.get('overwrite_when_only_on_disk', False)
+         # setting both flags is incompatible, so we opt in for the safest approach: "overwrite_when_only_on_disk"
+         # this is aligned with FTS implementation: see 
+         if overwrite and overwrite_when_only_on_disk:
